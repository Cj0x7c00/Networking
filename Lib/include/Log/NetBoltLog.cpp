#include "pch.h"
#include "NetBoltLog.h"

#define COLOR_CLEAR  "\033[0m"
#define COLOR_RED    "\033[1;31m"
#define COLOR_GREEN  "\033[1;32m"
#define COLOR_YELLOW "\033[1;33m"
#define COLOR_BLUE   "\033[1;34m"

namespace netblt
{
	struct File
	{
		File(const std::string _path)
		{
			m_Path = _path;
			CheckExists();
			Write("=================================================================\n");
			Write("== THIS FILE AND ITS CONTENTS WERE GENERATED BY THE ANVLOG LIB ==\n");
			Write("=================================================================\n");
		}

		void Write(std::string _content)
		{
			auto file = std::fstream(m_Path, std::ios::app);
			if (!file) 
			{
				std::cout << "LogError: Failed to open log file for output: " << m_Path << '\n';
				return;
			}

			file << _content;
			file.close();
		}

		void CheckExists()
		{
			if (!std::filesystem::exists(m_Path)) {
				std::ofstream newFile(m_Path);
				if (!newFile)
				{
					std::cout << "Failed to find and create file: " << m_Path << '\n';
				}
			}

			// Clear files contents and close
			std::ofstream clearFile(m_Path, std::ios::out | std::ios::trunc);
			clearFile.close();
		}

	private:
		std::string m_Path;
	};

	void NetBoltLog::Init(const LogCreateInfo& _info)
	{
		m_CreationInfo = _info;
		if (_info.fileOutput)
		{
			m_File = std::make_unique<File>(_info.logFilePath);
		}
	}

	void NetBoltLog::LOG_INFO(const std::string& _str, ...)
	{
		va_list args;
		va_start(args, _str);

		// Format the message
		std::string formattedMessage = formatString(_str, args);

		std::stringstream out;
		out << GetTime();
		out << "[INFO]: ";
		out << formattedMessage;

		if (m_CreationInfo.fileOutput)
		{
			m_File->Write(out.str() + "\n");
		}

		if (m_CreationInfo.consoleOutput)
		{
			std::cout << COLOR_GREEN << out.str() << COLOR_CLEAR << '\n';
		}

		va_end(args);
	}

	void NetBoltLog::LOG_DEBUG(const std::string& str, ...)
	{
		va_list args;
		va_start(args, str);

		// Format the message
		std::string formattedMessage = formatString(str, args); 

		std::stringstream out;
		out << GetTime();
		out << "[DEBUG]: ";
		out << formattedMessage;

		if (m_CreationInfo.fileOutput)
		{
			m_File->Write(out.str() + '\n');
		}

		if (m_CreationInfo.consoleOutput)
		{
			std::cout << COLOR_BLUE << out.str() << COLOR_CLEAR << '\n';
		}

		va_end(args);
	}

	void NetBoltLog::LOG_WARN(const std::string& str, ...)
	{
		va_list args;
		va_start(args, str);

		// Format the message
		std::string formattedMessage = formatString(str, args);

		std::stringstream out;
		out << GetTime();
		out << "[WARN]: ";
		out << formattedMessage;

		if (m_CreationInfo.fileOutput)
		{
			m_File->Write(out.str() + '\n');
		}

		if (m_CreationInfo.consoleOutput)
		{
			std::cout << COLOR_YELLOW << out.str() << COLOR_CLEAR << '\n';
		}

		va_end(args);
	}

	void NetBoltLog::LOG_ERROR(const std::string& str, ...)
	{
		va_list args;
		va_start(args, str);

		// Format the message
		std::string formattedMessage = formatString(str, args);

		std::stringstream out;
		out << GetTime();
		out << "[ERROR]: ";
		out << formattedMessage;

		if (m_CreationInfo.fileOutput)
		{
			m_File->Write(out.str() + '\n');
		}

		if (m_CreationInfo.consoleOutput)
		{
			std::cout << COLOR_RED << out.str() << COLOR_CLEAR << '\n';
		}

		va_end(args);
	}

	void NetBoltLog::LOG_FATAL(const std::string& str, ...)
	{
		va_list args;
		va_start(args, str);

		// Format the message
		std::string formattedMessage = formatString(str, args);

		std::stringstream out;
		out << GetTime();
		out << "[FATAL]: ";
		out << formattedMessage;

		if (m_CreationInfo.fileOutput)
		{
			m_File->Write(out.str() + '\n');
		}

		if (m_CreationInfo.consoleOutput)
		{
			std::cout << COLOR_RED << out.str() << COLOR_CLEAR << '\n';
		}

		va_end(args);

		throw std::runtime_error(out.str());
	}

	// returns a time formatted by the users pref
	std::string NetBoltLog::GetTime()
	{
		auto now = std::chrono::system_clock::now();
		std::time_t current = std::chrono::system_clock::to_time_t(now);

		std::string format = m_CreationInfo.timeFormat;
		std::stringstream ss = {};

		ss << "[";
		ss << std::put_time(std::localtime(&current), format.c_str());
		ss << "]";

		return ss.str();
	}

	std::string NetBoltLog::formatString(const std::string& format, va_list args)
	{
		char buffer[1024];
		vsnprintf(buffer, sizeof(buffer), format.c_str(), args);
		return std::string(buffer);
	}
}